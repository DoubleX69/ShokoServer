// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoko.Server.Repositories;

namespace Shoko.Server.Migrations
{
    [DbContext(typeof(ShokoContext))]
    partial class ShokoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Character", b =>
                {
                    b.Property<int>("AniDB_Anime_CharacterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("CharID");

                    b.Property<string>("CharType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EpisodeListRaw");

                    b.HasKey("AniDB_Anime_CharacterID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Character_AnimeID");

                    b.HasIndex("CharID")
                        .HasName("IX_AniDB_Anime_Character_CharID");

                    b.HasIndex("AnimeID", "CharID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_Character_AnimeID_CharID");

                    b.ToTable("AniDB_Anime_Character");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_DefaultImage", b =>
                {
                    b.Property<int>("AniDB_Anime_DefaultImageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("ImageParentID");

                    b.Property<int>("ImageParentType");

                    b.Property<int>("ImageType");

                    b.Property<int?>("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.HasKey("AniDB_Anime_DefaultImageID");

                    b.HasIndex("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.HasIndex("AnimeID", "ImageType")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_DefaultImage_ImageType");

                    b.ToTable("AniDB_Anime_DefaultImage");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Relation", b =>
                {
                    b.Property<int>("AniDB_Anime_RelationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("RelatedAnimeID");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("AniDB_Anime_RelationID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Relation_AnimeID");

                    b.HasIndex("AnimeID", "RelatedAnimeID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_Relation_AnimeID_RelatedAnimeID");

                    b.ToTable("AniDB_Anime_Relation");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Review", b =>
                {
                    b.Property<int>("AniDB_Anime_ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("ReviewID");

                    b.Property<int?>("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.HasKey("AniDB_Anime_ReviewID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Review_AnimeID");

                    b.HasIndex("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.HasIndex("AnimeID", "ReviewID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_Review_AnimeID_ReviewID");

                    b.ToTable("AniDB_Anime_Review");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Similar", b =>
                {
                    b.Property<int>("AniDB_Anime_SimilarID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("Approval");

                    b.Property<int>("SimilarAnimeID");

                    b.Property<int>("Total");

                    b.HasKey("AniDB_Anime_SimilarID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Similar_AnimeID");

                    b.HasIndex("AnimeID", "SimilarAnimeID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_Similar_AnimeID_SimilarAnimeID");

                    b.ToTable("AniDB_Anime_Similar");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Tag", b =>
                {
                    b.Property<int>("AniDB_Anime_TagID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("Approval");

                    b.Property<int>("TagID");

                    b.Property<int>("Weight");

                    b.HasKey("AniDB_Anime_TagID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Tag_AnimeID");

                    b.HasIndex("AnimeID", "TagID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Anime_Tag_AnimeID_TagID");

                    b.ToTable("AniDB_Anime_Tag");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Title", b =>
                {
                    b.Property<int>("AniDB_Anime_TitleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("TitleType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AniDB_Anime_TitleID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Anime_Title_AnimeID");

                    b.ToTable("AniDB_Anime_Title");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Character", b =>
                {
                    b.Property<int>("AniDB_CharacterID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharDescription")
                        .IsRequired();

                    b.Property<int>("CharID");

                    b.Property<string>("CharKanjiName")
                        .IsRequired();

                    b.Property<string>("CharName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CreatorListRaw")
                        .IsRequired();

                    b.Property<string>("PicName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("AniDB_CharacterID");

                    b.ToTable("AniDB_Character");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Character_Seiyuu", b =>
                {
                    b.Property<int>("AniDB_Character_SeiyuuID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("CharID");

                    b.Property<int>("SeiyuuID");

                    b.HasKey("AniDB_Character_SeiyuuID");

                    b.HasIndex("CharID")
                        .HasName("IX_AniDB_Character_Seiyuu_CharID");

                    b.HasIndex("CharID", "SeiyuuID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Character_Seiyuu_CharID_SeiyuuID");

                    b.ToTable("AniDB_Character_Seiyuu");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Episode", b =>
                {
                    b.Property<int>("AniDB_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AirDate");

                    b.Property<int>("AnimeID");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<string>("Description");

                    b.Property<int>("EpisodeID");

                    b.Property<int>("EpisodeNumber");

                    b.Property<int>("EpisodeType");

                    b.Property<int>("LengthSeconds");

                    b.Property<string>("Rating")
                        .IsRequired();

                    b.Property<int?>("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.Property<string>("Votes")
                        .IsRequired();

                    b.HasKey("AniDB_EpisodeID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_Episode_AnimeID");

                    b.HasIndex("EpisodeID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Episode_EpisodeID");

                    b.HasIndex("SVR_AniDB_AnimeAniDB_AnimeID");

                    b.ToTable("AniDB_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Episode_Title", b =>
                {
                    b.Property<int>("AniDB_Episode_TitleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AniDB_EpisodeID");

                    b.Property<string>("Language");

                    b.Property<string>("Title");

                    b.HasKey("AniDB_Episode_TitleID");

                    b.ToTable("AniDB_Episode_Title");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_GroupStatus", b =>
                {
                    b.Property<int>("AniDB_GroupStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("CompletionState");

                    b.Property<string>("EpisodeRange")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("GroupID");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("LastEpisodeNumber");

                    b.Property<int>("Rating");

                    b.Property<int>("Votes");

                    b.HasKey("AniDB_GroupStatusID");

                    b.HasIndex("AnimeID")
                        .HasName("IX_AniDB_GroupStatus_AnimeID");

                    b.HasIndex("AnimeID", "GroupID")
                        .IsUnique()
                        .HasName("UIX_AniDB_GroupStatus_AnimeID_GroupID");

                    b.ToTable("AniDB_GroupStatus");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_MylistStats", b =>
                {
                    b.Property<int>("AniDB_MylistStatsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AddedAnimes");

                    b.Property<int>("AddedEpisodes");

                    b.Property<int>("AddedFiles");

                    b.Property<int>("AddedGroups");

                    b.Property<int>("Animes");

                    b.Property<int>("Episodes");

                    b.Property<int>("EpisodesViewed");

                    b.Property<int>("Files");

                    b.Property<int>("GloryPct");

                    b.Property<int>("LeechPct");

                    b.Property<int>("MylistPct");

                    b.Property<int>("Reviews");

                    b.Property<long>("SizeOfFiles");

                    b.Property<int>("ViewedMylistPct");

                    b.Property<int>("ViewedPct");

                    b.Property<int>("ViewiedLength");

                    b.Property<int>("Votes");

                    b.HasKey("AniDB_MylistStatsID");

                    b.ToTable("AniDB_MylistStats");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Recommendation", b =>
                {
                    b.Property<int>("AniDB_RecommendationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<string>("RecommendationText");

                    b.Property<int>("RecommendationType");

                    b.Property<int>("UserID");

                    b.HasKey("AniDB_RecommendationID");

                    b.HasIndex("AnimeID", "UserID")
                        .IsUnique()
                        .HasName("UIX_AniDB_Recommendation");

                    b.ToTable("AniDB_Recommendation");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_ReleaseGroup", b =>
                {
                    b.Property<int>("AniDB_ReleaseGroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimeCount");

                    b.Property<int>("FileCount");

                    b.Property<int>("GroupID");

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.Property<string>("GroupNameShort")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IRCChannel")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IRCServer")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Picname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Rating");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Votes");

                    b.HasKey("AniDB_ReleaseGroupID");

                    b.ToTable("AniDB_ReleaseGroup");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Review", b =>
                {
                    b.Property<int>("AniDB_ReviewID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorID");

                    b.Property<int>("RatingAnimation");

                    b.Property<int>("RatingCharacter");

                    b.Property<int>("RatingEnjoyment");

                    b.Property<int>("RatingSound");

                    b.Property<int>("RatingStory");

                    b.Property<int>("RatingValue");

                    b.Property<int>("ReviewID");

                    b.Property<string>("ReviewText")
                        .IsRequired();

                    b.HasKey("AniDB_ReviewID");

                    b.ToTable("AniDB_Review");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Seiyuu", b =>
                {
                    b.Property<int>("AniDB_SeiyuuID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PicName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SeiyuuID");

                    b.Property<string>("SeiyuuName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AniDB_SeiyuuID");

                    b.ToTable("AniDB_Seiyuu");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Tag", b =>
                {
                    b.Property<int>("AniDB_TagID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GlobalSpoiler");

                    b.Property<int>("LocalSpoiler");

                    b.Property<int>("Spoiler");

                    b.Property<int>("TagCount");

                    b.Property<string>("TagDescription")
                        .IsRequired();

                    b.Property<int>("TagID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("AniDB_TagID");

                    b.ToTable("AniDB_Tag");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Vote", b =>
                {
                    b.Property<int>("AniDB_VoteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("EntityID");

                    b.Property<int>("VoteType");

                    b.Property<int>("VoteValue");

                    b.HasKey("AniDB_VoteID");

                    b.ToTable("AniDB_Vote");
                });

            modelBuilder.Entity("Shoko.Models.Server.AnimeCharacter", b =>
                {
                    b.Property<int>("CharacterID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternateName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<int>("AniDBID");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CharacterID");

                    b.ToTable("AnimeCharacter");
                });

            modelBuilder.Entity("Shoko.Models.Server.AnimeStaff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternateName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<int>("AniDBID");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("StaffID");

                    b.HasIndex("AniDBID")
                        .IsUnique()
                        .HasName("UIX_AnimeStaff_AniDBID");

                    b.ToTable("AnimeStaff");
                });

            modelBuilder.Entity("Shoko.Models.Server.AuthTokens", b =>
                {
                    b.Property<int>("AuthID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("DeviceName")
                        .IsRequired();

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.HasKey("AuthID");

                    b.HasIndex("Token")
                        .HasName("IX_AuthTokens_Token");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("Shoko.Models.Server.BookmarkedAnime", b =>
                {
                    b.Property<int>("AnimeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookmarkedAnimeID");

                    b.Property<int>("Downloading");

                    b.Property<string>("Notes");

                    b.Property<int>("Priority");

                    b.HasKey("AnimeID");

                    b.ToTable("BookmarkedAnime");
                });

            modelBuilder.Entity("Shoko.Models.Server.CommandRequest", b =>
                {
                    b.Property<int>("CommandRequestID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("CommandDetails")
                        .IsRequired();

                    b.Property<string>("CommandID")
                        .IsRequired();

                    b.Property<int>("CommandType");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<int>("Priority");

                    b.HasKey("CommandRequestID");

                    b.ToTable("CommandRequest");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_MAL", b =>
                {
                    b.Property<int>("CrossRef_AniDB_MALID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("CrossRefSource");

                    b.Property<int>("MALID");

                    b.Property<string>("MALTitle")
                        .HasMaxLength(500);

                    b.Property<int>("StartEpisodeNumber");

                    b.Property<int>("StartEpisodeType");

                    b.HasKey("CrossRef_AniDB_MALID");

                    b.HasIndex("MALID")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_MAL_MALID");

                    b.HasIndex("AnimeID", "StartEpisodeType", "StartEpisodeNumber")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_MAL_Anime");

                    b.ToTable("CrossRef_AniDB_MAL");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_Other", b =>
                {
                    b.Property<int>("CrossRef_AniDB_OtherID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<string>("CrossRefID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("CrossRefSource");

                    b.Property<int>("CrossRefType");

                    b.HasKey("CrossRef_AniDB_OtherID");

                    b.HasIndex("AnimeID", "CrossRefID", "CrossRefSource", "CrossRefType")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_Other");

                    b.ToTable("CrossRef_AniDB_Other");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_Trakt_Episode", b =>
                {
                    b.Property<int>("CrossRef_AniDB_Trakt_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AniDBEpisodeID");

                    b.Property<int>("AnimeID");

                    b.Property<int>("EpisodeNumber");

                    b.Property<int>("Season");

                    b.Property<string>("TraktID")
                        .HasMaxLength(500);

                    b.HasKey("CrossRef_AniDB_Trakt_EpisodeID");

                    b.HasIndex("AniDBEpisodeID")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_Trakt_Episode_AniDBEpisodeID");

                    b.ToTable("CrossRef_AniDB_Trakt_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_TraktV2", b =>
                {
                    b.Property<int>("CrossRef_AniDB_TraktV2ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AniDBStartEpisodeNumber");

                    b.Property<int>("AniDBStartEpisodeType");

                    b.Property<int>("AnimeID");

                    b.Property<int>("CrossRefSource");

                    b.Property<string>("TraktID")
                        .HasMaxLength(500);

                    b.Property<int>("TraktSeasonNumber");

                    b.Property<int>("TraktStartEpisodeNumber");

                    b.Property<string>("TraktTitle");

                    b.HasKey("CrossRef_AniDB_TraktV2ID");

                    b.HasIndex("AnimeID", "TraktSeasonNumber", "TraktStartEpisodeNumber", "AniDBStartEpisodeType", "AniDBStartEpisodeNumber")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_TraktV2");

                    b.ToTable("CrossRef_AniDB_TraktV2");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_TvDB", b =>
                {
                    b.Property<int>("CrossRef_AniDB_TvDBID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AniDBID");

                    b.Property<int>("CrossRefSource");

                    b.Property<int>("TvDBID");

                    b.HasKey("CrossRef_AniDB_TvDBID");

                    b.ToTable("CrossRef_AniDB_TvDB");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_TvDB_Episode", b =>
                {
                    b.Property<int>("CrossRef_AniDB_TvDB_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AniDBEpisodeID");

                    b.Property<int>("MatchRating");

                    b.Property<int>("TvDBEpisodeID");

                    b.HasKey("CrossRef_AniDB_TvDB_EpisodeID");

                    b.HasIndex("AniDBEpisodeID")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_TvDB_Episode_AniDBEpisodeID");

                    b.ToTable("CrossRef_AniDB_TvDB_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_TvDB_Episode_Override", b =>
                {
                    b.Property<int>("CrossRef_AniDB_TvDB_Episode_OverrideID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AniDBEpisodeID");

                    b.Property<int>("TvDBEpisodeID");

                    b.HasKey("CrossRef_AniDB_TvDB_Episode_OverrideID");

                    b.ToTable("CrossRef_AniDB_TvDB_Episode_Override");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_AniDB_TvDBV2", b =>
                {
                    b.Property<int>("CrossRef_AniDB_TvDBV2ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AniDBStartEpisodeNumber");

                    b.Property<int>("AniDBStartEpisodeType");

                    b.Property<int>("AnimeID");

                    b.Property<int>("CrossRefSource");

                    b.Property<bool>("IsAdditive");

                    b.Property<int>("TvDBID");

                    b.Property<int>("TvDBSeasonNumber");

                    b.Property<int>("TvDBStartEpisodeNumber");

                    b.Property<string>("TvDBTitle");

                    b.HasKey("CrossRef_AniDB_TvDBV2ID");

                    b.HasIndex("AnimeID", "TvDBID", "TvDBSeasonNumber", "TvDBStartEpisodeNumber", "AniDBStartEpisodeType", "AniDBStartEpisodeNumber")
                        .IsUnique()
                        .HasName("UIX_CrossRef_AniDB_TvDBV2");

                    b.ToTable("CrossRef_AniDB_TvDBV2");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_Anime_Staff", b =>
                {
                    b.Property<int>("CrossRef_Anime_StaffID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AniDB_AnimeID");

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<int?>("RoleID")
                        .IsRequired();

                    b.Property<int>("RoleType");

                    b.Property<int>("StaffID");

                    b.HasKey("CrossRef_Anime_StaffID");

                    b.ToTable("CrossRef_Anime_Staff");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_CustomTag", b =>
                {
                    b.Property<int>("CrossRef_CustomTagID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("CrossRefID");

                    b.Property<int>("CrossRefType");

                    b.Property<int>("CustomTagID");

                    b.HasKey("CrossRef_CustomTagID");

                    b.HasIndex("CustomTagID")
                        .HasName("IX_CrossRef_CustomTag");

                    b.ToTable("CrossRef_CustomTag");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_File_Episode", b =>
                {
                    b.Property<int>("CrossRef_File_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("CrossRefSource");

                    b.Property<int>("EpisodeID");

                    b.Property<int>("EpisodeOrder");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("FileSize");

                    b.Property<string>("Hash")
                        .HasMaxLength(50);

                    b.Property<int>("Percentage");

                    b.HasKey("CrossRef_File_EpisodeID");

                    b.HasIndex("Hash", "EpisodeID")
                        .IsUnique()
                        .HasName("UIX_CrossRef_File_Episode_Hash_EpisodeID");

                    b.ToTable("CrossRef_File_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_Languages_AniDB_File", b =>
                {
                    b.Property<int>("CrossRef_Languages_AniDB_FileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("FileID");

                    b.Property<int>("LanguageID");

                    b.HasKey("CrossRef_Languages_AniDB_FileID");

                    b.HasIndex("FileID")
                        .HasName("IX_CrossRef_Languages_AniDB_File_FileID");

                    b.HasIndex("LanguageID")
                        .HasName("IX_CrossRef_Languages_AniDB_File_LanguageID");

                    b.ToTable("CrossRef_Languages_AniDB_File");
                });

            modelBuilder.Entity("Shoko.Models.Server.CrossRef_Subtitles_AniDB_File", b =>
                {
                    b.Property<int>("CrossRef_Subtitles_AniDB_FileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("FileID");

                    b.Property<int>("LanguageID");

                    b.HasKey("CrossRef_Subtitles_AniDB_FileID");

                    b.HasIndex("FileID")
                        .HasName("IX_CrossRef_Subtitles_AniDB_File_FileID");

                    b.HasIndex("LanguageID")
                        .HasName("IX_CrossRef_Subtitles_AniDB_File_LanguageID");

                    b.ToTable("CrossRef_Subtitles_AniDB_File");
                });

            modelBuilder.Entity("Shoko.Models.Server.CustomTag", b =>
                {
                    b.Property<int>("CustomTagID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("TagDescription");

                    b.Property<string>("TagName")
                        .HasMaxLength(500);

                    b.HasKey("CustomTagID");

                    b.ToTable("CustomTag");
                });

            modelBuilder.Entity("Shoko.Models.Server.DuplicateFile", b =>
                {
                    b.Property<int>("DuplicateFileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<string>("FilePathFile1")
                        .IsRequired();

                    b.Property<string>("FilePathFile2")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ImportFolderIDFile1");

                    b.Property<int>("ImportFolderIDFile2");

                    b.HasKey("DuplicateFileID");

                    b.ToTable("DuplicateFile");
                });

            modelBuilder.Entity("Shoko.Models.Server.FileFfdshowPreset", b =>
                {
                    b.Property<int>("FileFfdshowPresetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<long>("FileSize");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Preset");

                    b.HasKey("FileFfdshowPresetID");

                    b.HasIndex("Hash", "FileSize")
                        .IsUnique()
                        .HasName("UIX_FileFfdshowPreset_Hash");

                    b.ToTable("FileFfdshowPreset");
                });

            modelBuilder.Entity("Shoko.Models.Server.FileNameHash", b =>
                {
                    b.Property<int>("FileNameHashID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("FileSize");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("FileNameHashID");

                    b.HasIndex("FileName", "FileSize", "Hash")
                        .IsUnique()
                        .HasName("UIX_FileNameHash");

                    b.ToTable("FileNameHash");
                });

            modelBuilder.Entity("Shoko.Models.Server.GroupFilterCondition", b =>
                {
                    b.Property<int>("GroupFilterConditionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConditionOperator");

                    b.Property<string>("ConditionParameter")
                        .IsRequired();

                    b.Property<int>("ConditionType");

                    b.Property<int>("GroupFilterID");

                    b.HasKey("GroupFilterConditionID");

                    b.ToTable("GroupFilterCondition");
                });

            modelBuilder.Entity("Shoko.Models.Server.IgnoreAnime", b =>
                {
                    b.Property<int>("IgnoreAnimeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeID");

                    b.Property<int>("IgnoreType");

                    b.Property<int>("JMMUserID");

                    b.HasKey("IgnoreAnimeID");

                    b.HasIndex("JMMUserID", "AnimeID", "IgnoreType")
                        .IsUnique()
                        .HasName("UIX_IgnoreAnime_User_AnimeID");

                    b.ToTable("IgnoreAnime");
                });

            modelBuilder.Entity("Shoko.Models.Server.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("LanguageID");

                    b.HasIndex("LanguageName")
                        .IsUnique()
                        .HasName("UIX_Language_LanguageName");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Shoko.Models.Server.MovieDB_Fanart", b =>
                {
                    b.Property<int>("MovieDB_FanartID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("Enabled");

                    b.Property<int>("ImageHeight");

                    b.Property<string>("ImageID");

                    b.Property<string>("ImageSize")
                        .HasMaxLength(100);

                    b.Property<string>("ImageType")
                        .HasMaxLength(100);

                    b.Property<int>("ImageWidth");

                    b.Property<int>("MovieId");

                    b.Property<string>("URL");

                    b.HasKey("MovieDB_FanartID");

                    b.ToTable("MovieDB_Fanart");
                });

            modelBuilder.Entity("Shoko.Models.Server.MovieDB_Movie", b =>
                {
                    b.Property<int>("MovieDB_MovieID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("MovieId");

                    b.Property<string>("MovieName");

                    b.Property<string>("OriginalName");

                    b.Property<string>("Overview");

                    b.Property<int>("Rating");

                    b.HasKey("MovieDB_MovieID");

                    b.HasIndex("MovieId")
                        .IsUnique()
                        .HasName("UIX_MovieDB_Movie_Id");

                    b.ToTable("MovieDB_Movie");
                });

            modelBuilder.Entity("Shoko.Models.Server.MovieDB_Poster", b =>
                {
                    b.Property<int>("MovieDB_PosterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("Enabled");

                    b.Property<int>("ImageHeight");

                    b.Property<string>("ImageID")
                        .HasMaxLength(100);

                    b.Property<string>("ImageSize")
                        .HasMaxLength(100);

                    b.Property<string>("ImageType")
                        .HasMaxLength(100);

                    b.Property<int>("ImageWidth");

                    b.Property<int>("MovieId");

                    b.Property<string>("URL");

                    b.HasKey("MovieDB_PosterID");

                    b.ToTable("MovieDB_Poster");
                });

            modelBuilder.Entity("Shoko.Models.Server.Playlist", b =>
                {
                    b.Property<int>("PlaylistID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("DefaultPlayOrder");

                    b.Property<int>("PlayUnwatched");

                    b.Property<int>("PlayWatched");

                    b.Property<string>("PlaylistItems");

                    b.Property<string>("PlaylistName");

                    b.HasKey("PlaylistID");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("Shoko.Models.Server.RenameScript", b =>
                {
                    b.Property<int>("RenameScriptID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("ExtraData");

                    b.Property<int>("IsEnabledOnImport");

                    b.Property<string>("RenamerType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Legacy");

                    b.Property<string>("Script");

                    b.Property<string>("ScriptName");

                    b.HasKey("RenameScriptID");

                    b.ToTable("RenameScript");
                });

            modelBuilder.Entity("Shoko.Models.Server.ScanFile", b =>
                {
                    b.Property<int>("ScanFileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<DateTime?>("CheckDate");

                    b.Property<long>("FileSize");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("HashResult")
                        .HasMaxLength(100);

                    b.Property<int>("ImportFolderID");

                    b.Property<int>("ScanID");

                    b.Property<int>("Status");

                    b.Property<int>("VideoLocal_Place_ID");

                    b.HasKey("ScanFileID");

                    b.HasIndex("ScanID", "Status")
                        .HasName("IX_ScanFileStatus");

                    b.ToTable("ScanFile");
                });

            modelBuilder.Entity("Shoko.Models.Server.ScheduledUpdate", b =>
                {
                    b.Property<int>("ScheduledUpdateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("UpdateDetails")
                        .IsRequired();

                    b.Property<int>("UpdateType");

                    b.HasKey("ScheduledUpdateID");

                    b.HasIndex("UpdateType")
                        .IsUnique()
                        .HasName("UIX_ScheduledUpdate_Type");

                    b.ToTable("ScheduledUpdate");
                });

            modelBuilder.Entity("Shoko.Models.Server.Trakt_Episode", b =>
                {
                    b.Property<int>("Trakt_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("EpisodeNumber");

                    b.Property<string>("Overview");

                    b.Property<int>("Season");

                    b.Property<string>("Title");

                    b.Property<int?>("TraktID");

                    b.Property<int>("Trakt_ShowID");

                    b.Property<string>("URL")
                        .HasMaxLength(500);

                    b.HasKey("Trakt_EpisodeID");

                    b.ToTable("Trakt_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.Trakt_Friend", b =>
                {
                    b.Property<int>("Trakt_FriendID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("About");

                    b.Property<string>("Age")
                        .HasMaxLength(100);

                    b.Property<string>("Avatar");

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasMaxLength(100);

                    b.Property<int>("Joined");

                    b.Property<DateTime>("LastAvatarUpdate");

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<string>("Url");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Trakt_FriendID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("UIX_Trakt_Friend_Username");

                    b.ToTable("Trakt_Friend");
                });

            modelBuilder.Entity("Shoko.Models.Server.Trakt_Season", b =>
                {
                    b.Property<int>("Trakt_SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("Season");

                    b.Property<int>("Trakt_ShowID");

                    b.Property<string>("URL")
                        .HasMaxLength(500);

                    b.HasKey("Trakt_SeasonID");

                    b.ToTable("Trakt_Season");
                });

            modelBuilder.Entity("Shoko.Models.Server.Trakt_Show", b =>
                {
                    b.Property<int>("Trakt_ShowID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("Overview");

                    b.Property<string>("Title");

                    b.Property<string>("TraktID")
                        .HasMaxLength(500);

                    b.Property<int?>("TvDB_ID");

                    b.Property<string>("URL")
                        .HasMaxLength(500);

                    b.Property<string>("Year")
                        .HasMaxLength(500);

                    b.HasKey("Trakt_ShowID");

                    b.ToTable("Trakt_Show");
                });

            modelBuilder.Entity("Shoko.Models.Server.TvDB_Episode", b =>
                {
                    b.Property<int>("TvDB_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int?>("AbsoluteNumber");

                    b.Property<DateTime?>("AirDate");

                    b.Property<int?>("AirsAfterSeason");

                    b.Property<int?>("AirsBeforeEpisode");

                    b.Property<int?>("AirsBeforeSeason");

                    b.Property<int>("EpImgFlag");

                    b.Property<string>("EpisodeName");

                    b.Property<int>("EpisodeNumber");

                    b.Property<string>("Filename");

                    b.Property<int>("Id");

                    b.Property<string>("Overview");

                    b.Property<int?>("Rating");

                    b.Property<int>("SeasonID");

                    b.Property<int>("SeasonNumber");

                    b.Property<int>("SeriesID");

                    b.HasKey("TvDB_EpisodeID");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UIX_TvDB_Episode_Id");

                    b.ToTable("TvDB_Episode");
                });

            modelBuilder.Entity("Shoko.Models.Server.TvDB_ImageFanart", b =>
                {
                    b.Property<int>("TvDB_ImageFanartID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("BannerPath");

                    b.Property<string>("BannerType");

                    b.Property<string>("BannerType2");

                    b.Property<int>("Chosen");

                    b.Property<string>("Colors");

                    b.Property<int>("Enabled");

                    b.Property<int>("Id");

                    b.Property<string>("Language");

                    b.Property<int>("SeriesID");

                    b.Property<string>("ThumbnailPath");

                    b.Property<string>("VignettePath");

                    b.HasKey("TvDB_ImageFanartID");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UIX_TvDB_ImageFanart_Id");

                    b.ToTable("TvDB_ImageFanart");
                });

            modelBuilder.Entity("Shoko.Models.Server.TvDB_ImagePoster", b =>
                {
                    b.Property<int>("TvDB_ImagePosterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("BannerPath");

                    b.Property<string>("BannerType");

                    b.Property<string>("BannerType2");

                    b.Property<int>("Enabled");

                    b.Property<int>("Id");

                    b.Property<string>("Language");

                    b.Property<int?>("SeasonNumber");

                    b.Property<int>("SeriesID");

                    b.HasKey("TvDB_ImagePosterID");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UIX_TvDB_ImagePoster_Id");

                    b.ToTable("TvDB_ImagePoster");
                });

            modelBuilder.Entity("Shoko.Models.Server.TvDB_ImageWideBanner", b =>
                {
                    b.Property<int>("TvDB_ImageWideBannerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("BannerPath");

                    b.Property<string>("BannerType");

                    b.Property<string>("BannerType2");

                    b.Property<int>("Enabled");

                    b.Property<int>("Id");

                    b.Property<string>("Language");

                    b.Property<int?>("SeasonNumber");

                    b.Property<int>("SeriesID");

                    b.HasKey("TvDB_ImageWideBannerID");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UIX_TvDB_ImageWideBanner_Id");

                    b.ToTable("TvDB_ImageWideBanner");
                });

            modelBuilder.Entity("Shoko.Models.Server.TvDB_Series", b =>
                {
                    b.Property<int>("TvDB_SeriesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("Banner")
                        .HasMaxLength(100);

                    b.Property<string>("Fanart")
                        .HasMaxLength(100);

                    b.Property<string>("Lastupdated")
                        .HasMaxLength(100);

                    b.Property<string>("Overview");

                    b.Property<string>("Poster")
                        .HasMaxLength(100);

                    b.Property<int?>("Rating");

                    b.Property<int>("SeriesID");

                    b.Property<string>("SeriesName");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.HasKey("TvDB_SeriesID");

                    b.HasIndex("SeriesID")
                        .IsUnique()
                        .HasName("UIX_TvDB_Series_SeriesID");

                    b.ToTable("TvDB_Series");
                });

            modelBuilder.Entity("Shoko.Models.Server.VideoLocal_User", b =>
                {
                    b.Property<int>("VideoLocal_UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("JMMUserID");

                    b.Property<long>("ResumePosition")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<int>("VideoLocalID");

                    b.Property<DateTime?>("WatchedDate");

                    b.HasKey("VideoLocal_UserID");

                    b.HasIndex("JMMUserID", "VideoLocalID")
                        .IsUnique()
                        .HasName("UIX_VideoLocal_User_User_VideoLocalID");

                    b.ToTable("VideoLocal_User");
                });

            modelBuilder.Entity("Shoko.Server.Models.AniDB_AnimeUpdate", b =>
                {
                    b.Property<int>("AniDB_AnimeUpdateID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimeID");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AniDB_AnimeUpdateID");

                    b.ToTable("AniDB_AnimeUpdate");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AniDB_Anime", b =>
                {
                    b.Property<int>("AniDB_AnimeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ANNID");

                    b.Property<DateTime?>("AirDate");

                    b.Property<int?>("AllCinemaID");

                    b.Property<string>("AllTags")
                        .IsRequired();

                    b.Property<string>("AllTitles")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<int>("AnimeID");

                    b.Property<int?>("AnimeNfo");

                    b.Property<int?>("AnimePlanetID");

                    b.Property<int>("AnimeType");

                    b.Property<int?>("AnisonID");

                    b.Property<int>("AvgReviewRating");

                    b.Property<string>("AwardList")
                        .IsRequired();

                    b.Property<int>("BeginYear");

                    b.Property<byte[]>("ContractBlob");

                    b.Property<int>("ContractSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ContractVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("CrunchyrollID");

                    b.Property<DateTime>("DateTimeDescUpdated");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("DisableExternalLinksFlag");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EndYear");

                    b.Property<int>("EpisodeCount");

                    b.Property<int>("EpisodeCountNormal");

                    b.Property<int>("EpisodeCountSpecial");

                    b.Property<int>("ImageEnabled");

                    b.Property<int?>("LatestEpisodeNumber");

                    b.Property<string>("MainTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Picname");

                    b.Property<int>("Rating");

                    b.Property<int>("Restricted");

                    b.Property<int>("ReviewCount");

                    b.Property<string>("Site_EN");

                    b.Property<string>("Site_JP");

                    b.Property<int?>("SyoboiID");

                    b.Property<int>("TempRating");

                    b.Property<int>("TempVoteCount");

                    b.Property<string>("URL");

                    b.Property<int>("VoteCount");

                    b.Property<string>("WikipediaJP_ID");

                    b.Property<string>("Wikipedia_ID");

                    b.HasKey("AniDB_AnimeID");

                    b.ToTable("AniDB_Anime");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AniDB_File", b =>
                {
                    b.Property<int>("AniDB_FileID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimeID");

                    b.Property<string>("Anime_GroupName")
                        .IsRequired();

                    b.Property<string>("Anime_GroupNameShort")
                        .IsRequired();

                    b.Property<string>("CRC")
                        .IsRequired();

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<int>("Episode_Rating");

                    b.Property<int>("Episode_Votes");

                    b.Property<int>("FileID");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<long>("FileSize");

                    b.Property<int>("FileVersion");

                    b.Property<string>("File_AudioCodec")
                        .IsRequired();

                    b.Property<string>("File_Description")
                        .IsRequired();

                    b.Property<string>("File_FileExtension")
                        .IsRequired();

                    b.Property<int>("File_LengthSeconds");

                    b.Property<int>("File_ReleaseDate");

                    b.Property<string>("File_Source")
                        .IsRequired();

                    b.Property<string>("File_VideoCodec")
                        .IsRequired();

                    b.Property<string>("File_VideoResolution")
                        .IsRequired();

                    b.Property<int>("GroupID");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("InternalVersion");

                    b.Property<int>("IsCensored");

                    b.Property<int>("IsChaptered")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(-1);

                    b.Property<int>("IsDeprecated");

                    b.Property<int>("IsWatched");

                    b.Property<string>("MD5")
                        .IsRequired();

                    b.Property<string>("SHA1")
                        .IsRequired();

                    b.Property<DateTime?>("WatchedDate");

                    b.HasKey("AniDB_FileID");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasName("UIX_AniDB_File_Hash");

                    b.ToTable("AniDB_File");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeEpisode", b =>
                {
                    b.Property<int>("AnimeEpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AniDB_EpisodeID");

                    b.Property<int>("AnimeSeriesID");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.HasKey("AnimeEpisodeID");

                    b.HasIndex("AniDB_EpisodeID")
                        .IsUnique()
                        .HasName("UIX_AnimeEpisode_AniDB_EpisodeID");

                    b.HasIndex("AnimeSeriesID")
                        .HasName("IX_AnimeEpisode_AnimeSeriesID");

                    b.ToTable("AnimeEpisode");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeEpisode_User", b =>
                {
                    b.Property<int>("AnimeEpisode_UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeEpisodeID");

                    b.Property<int>("AnimeSeriesID");

                    b.Property<byte[]>("ContractBlob");

                    b.Property<int>("ContractSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ContractVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("JMMUserID");

                    b.Property<int>("PlayedCount");

                    b.Property<int>("StoppedCount");

                    b.Property<int>("WatchedCount");

                    b.Property<DateTime?>("WatchedDate");

                    b.HasKey("AnimeEpisode_UserID");

                    b.HasIndex("JMMUserID", "AnimeEpisodeID")
                        .IsUnique()
                        .HasName("UIX_AnimeEpisode_User_User_EpisodeID");

                    b.HasIndex("JMMUserID", "AnimeSeriesID")
                        .HasName("IX_AnimeEpisode_User_User_AnimeSeriesID");

                    b.ToTable("AnimeEpisode_User");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeGroup", b =>
                {
                    b.Property<int>("AnimeGroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int?>("AnimeGroupParentID");

                    b.Property<byte[]>("ContractBlob");

                    b.Property<int>("ContractSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ContractVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<int?>("DefaultAnimeSeriesID");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EpisodeAddedDate");

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.Property<int>("IsManuallyNamed");

                    b.Property<DateTime?>("LatestEpisodeAirDate");

                    b.Property<int>("MissingEpisodeCount");

                    b.Property<int>("MissingEpisodeCountGroups");

                    b.Property<int>("OverrideDescription");

                    b.Property<string>("SortName")
                        .IsRequired();

                    b.HasKey("AnimeGroupID");

                    b.HasIndex("AnimeGroupParentID")
                        .HasName("IX_AnimeGroup_AnimeGroupParentID");

                    b.ToTable("AnimeGroup");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeGroup_User", b =>
                {
                    b.Property<int>("AnimeGroup_UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeGroupID");

                    b.Property<int>("IsFave");

                    b.Property<int>("JMMUserID");

                    b.Property<int>("PlayedCount");

                    b.Property<int>("StoppedCount");

                    b.Property<int>("UnwatchedEpisodeCount");

                    b.Property<int>("WatchedCount");

                    b.Property<DateTime?>("WatchedDate");

                    b.Property<int>("WatchedEpisodeCount");

                    b.HasKey("AnimeGroup_UserID");

                    b.HasIndex("JMMUserID", "AnimeGroupID")
                        .IsUnique()
                        .HasName("UIX_AnimeGroup_User_User_GroupID");

                    b.ToTable("AnimeGroup_User");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeSeries", b =>
                {
                    b.Property<int>("AnimeSeriesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int?>("AirsOn");

                    b.Property<int>("AniDB_ID");

                    b.Property<int>("AnimeGroupID");

                    b.Property<byte[]>("ContractBlob");

                    b.Property<int>("ContractSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ContractVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<string>("DefaultAudioLanguage");

                    b.Property<string>("DefaultFolder");

                    b.Property<string>("DefaultSubtitleLanguage");

                    b.Property<DateTime?>("EpisodeAddedDate");

                    b.Property<DateTime?>("LatestEpisodeAirDate");

                    b.Property<int>("LatestLocalEpisodeNumber");

                    b.Property<int>("MissingEpisodeCount");

                    b.Property<int>("MissingEpisodeCountGroups");

                    b.Property<string>("SeriesNameOverride")
                        .HasMaxLength(500);

                    b.HasKey("AnimeSeriesID");

                    b.HasIndex("AniDB_ID")
                        .IsUnique()
                        .HasName("UIX_AnimeSeries_AniDB_ID");

                    b.HasIndex("AnimeGroupID")
                        .HasName("IX_AnimeSeries_AnimeGroupID");

                    b.ToTable("AnimeSeries");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_AnimeSeries_User", b =>
                {
                    b.Property<int>("AnimeSeries_UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("AnimeSeriesID");

                    b.Property<int>("JMMUserID");

                    b.Property<int>("PlayedCount");

                    b.Property<int>("StoppedCount");

                    b.Property<int>("UnwatchedEpisodeCount");

                    b.Property<int>("WatchedCount");

                    b.Property<DateTime?>("WatchedDate");

                    b.Property<int>("WatchedEpisodeCount");

                    b.HasKey("AnimeSeries_UserID");

                    b.HasIndex("JMMUserID", "AnimeSeriesID")
                        .IsUnique()
                        .HasName("UIX_AnimeSeries_User_User_SeriesID");

                    b.ToTable("AnimeSeries_User");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_CloudAccount", b =>
                {
                    b.Property<int>("CloudID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("ConnectionString")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Provider")
                        .IsRequired();

                    b.HasKey("CloudID");

                    b.ToTable("CloudAccount");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_GroupFilter", b =>
                {
                    b.Property<int>("GroupFilterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int>("ApplyToSeries");

                    b.Property<int>("BaseCondition");

                    b.Property<int>("FilterType");

                    b.Property<string>("GroupConditions");

                    b.Property<int>("GroupConditionsVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("GroupFilterName")
                        .IsRequired();

                    b.Property<string>("GroupsIdsString");

                    b.Property<int>("GroupsIdsVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("InvisibleInClients")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Locked");

                    b.Property<int?>("ParentGroupFilterID");

                    b.Property<string>("SeriesIdsString");

                    b.Property<int>("SeriesIdsVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("SortingCriteria");

                    b.HasKey("GroupFilterID");

                    b.HasIndex("ParentGroupFilterID")
                        .HasName("IX_GroupFilter_ParentGroupFilterID");

                    b.ToTable("GroupFilter");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_ImportFolder", b =>
                {
                    b.Property<int>("ImportFolderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int?>("CloudID");

                    b.Property<string>("ImportFolderLocation")
                        .IsRequired();

                    b.Property<string>("ImportFolderName")
                        .IsRequired();

                    b.Property<int>("ImportFolderType");

                    b.Property<int>("IsDropDestination");

                    b.Property<int>("IsDropSource");

                    b.Property<int>("IsWatched");

                    b.HasKey("ImportFolderID");

                    b.ToTable("ImportFolder");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_JMMUser", b =>
                {
                    b.Property<int>("JMMUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<int?>("CanEditServerSettings");

                    b.Property<string>("HideCategories");

                    b.Property<int>("IsAdmin");

                    b.Property<int>("IsAniDBUser");

                    b.Property<int>("IsTraktUser");

                    b.Property<string>("Password")
                        .HasMaxLength(150);

                    b.Property<string>("PlexToken");

                    b.Property<string>("PlexUsers");

                    b.Property<string>("Username")
                        .HasMaxLength(100);

                    b.HasKey("JMMUserID");

                    b.ToTable("JMMUser");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_Scan", b =>
                {
                    b.Property<int>("ScanID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ImportFolders")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("ScanID");

                    b.ToTable("Scan");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_VideoLocal", b =>
                {
                    b.Property<int>("VideoLocalID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("AudioBitrate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("AudioCodec")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("CRC32")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<DateTime>("DateTimeUpdated");

                    b.Property<long>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("FileName");

                    b.Property<long>("FileSize");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("HashSource");

                    b.Property<int>("IsIgnored");

                    b.Property<int>("IsVariation");

                    b.Property<string>("MD5")
                        .HasMaxLength(50);

                    b.Property<byte[]>("MediaBlob");

                    b.Property<int>("MediaSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("MediaVersion")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("MyListID");

                    b.Property<string>("SHA1")
                        .HasMaxLength(50);

                    b.Property<string>("VideoBitDepth")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("VideoBitrate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("VideoCodec")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("VideoFrameRate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("VideoResolution")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.HasKey("VideoLocalID");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasName("UIX_IX_VideoLocal_Hash");

                    b.ToTable("VideoLocal");
                });

            modelBuilder.Entity("Shoko.Server.Models.SVR_VideoLocal_Place", b =>
                {
                    b.Property<int>("VideoLocal_Place_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("LocalGen", true);

                    b.Property<string>("FilePath")
                        .IsRequired();

                    b.Property<int>("ImportFolderID");

                    b.Property<int>("ImportFolderType");

                    b.Property<int>("VideoLocalID");

                    b.HasKey("VideoLocal_Place_ID");

                    b.ToTable("VideoLocal_Place");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_DefaultImage", b =>
                {
                    b.HasOne("Shoko.Server.Models.SVR_AniDB_Anime")
                        .WithMany("AllPosters")
                        .HasForeignKey("SVR_AniDB_AnimeAniDB_AnimeID");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Anime_Review", b =>
                {
                    b.HasOne("Shoko.Server.Models.SVR_AniDB_Anime")
                        .WithMany("AnimeReviews")
                        .HasForeignKey("SVR_AniDB_AnimeAniDB_AnimeID");
                });

            modelBuilder.Entity("Shoko.Models.Server.AniDB_Episode", b =>
                {
                    b.HasOne("Shoko.Server.Models.SVR_AniDB_Anime")
                        .WithMany("AniDBEpisodes")
                        .HasForeignKey("SVR_AniDB_AnimeAniDB_AnimeID");
                });
#pragma warning restore 612, 618
        }
    }
}
